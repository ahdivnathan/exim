}
return(vec)
}
testLoop2(5)
testLoop2 = function(n) {
vec = c(1, 2)
for (i in 3:(n-1)) {
vec[i] = vec[(i-1)] + 2/vec[(i-1)]
}
return(vec)
}
testLoop2(5)
testLoop2 = function(yVec) {
return(sum(exp(yVec)))
}
testLoop2(1)
exp(1:5)
testLoop2 = function(n) {
n = length(yVec)
sum(exp(seq(along=yVec)))
}
testLoop2(0)
testLoop2 = function(yVec) {
n = length(yVec)
sum(exp(seq(along=yVec)))
}
testLoop2(0)
testLoop2 <- function(yVec) {
n <- length(yVec)
sum(exp(seq(along=yVec)))
}
testLoop2(0)
testLoop2 <- function(yVec) {
n <- length(yVec)
sum( exp(seq(along=yVec)) )
}
testLoop2(c(0))
testLoop2 <- function(yVec)
{
n <- length(yVec)
sum( exp(seq(along=yVec)) )
}
testLoop2 <- function(yVec) {
n <- length(yVec)
sum( exp(seq(along=yVec)) )
}
testLoop2 <- function(yVec) {
n <- length(yVec)
sum( exp(seq(along=yVec)) )
}
testLoop2 <- function(yVec) {
n <- length(yVec)
sum( exp(seq(along=yVec)) )
}
testLoop2(1)
testLoop2(2)
testLoop2(3)
testLoop2 = function(yVec) {}
testLoop2 = function(yVec) {
sum( exp(seq(along=length(yVec))))
}
testLoop2(0)
testLoop2(1)
testLoop2(2)
exp(seq(along=3))
seq(along=5)
yVec = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
seq(along=yVec)
exp(seq(along=yVec))
sum(exp(seq(along=yVec)))
testLoop2 = function(yVec) {
sum( exp(seq(along=yVec)))
}
testLoop2()
testLoop2(c(1, 2, 3))
seq(along=0)
seq(along="")
seq(along=c())
quadmap = function(start, rho, niter) {
vec = c(start)
for (i in 2:n) {
vec[i] = rho*vec[i-1]*(1-vec[i-1])
}
}
quadmap = function(start, rho, niter) {
vec = c(start)
for (i in 2:n) {
vec[i] = rho*vec[i-1]*(1-vec[i-1])
}
vec
}
quadmap(start=0.7, rho=2, niter=1000000)
quadmap(start=0.7, rho=2, niter=1000)
quadmap(start=0.7, rho=2, niter=1000000)
quadmap(start=0.7, rho=2, niter=10)
quadmap = function(start, rho, niter) {
vec = c(start)
for (i in 2:niter) {
vec[i] = rho*vec[i-1]*(1-vec[i-1])
}
vec
}
quadmap(start=0.7, rho=2, niter=10)
quadmap = function(start, rho) {
vec = c(start)
for (i in 2:niter) {
vec[i] = rho*vec[i-1]*(1-vec[i-1])
}
vec
}
quadmap = function(start, rho) {
vec = c(start)
while(abs(vec[length(vec)]-vec[(length(vec)-1)])>=0.02) {
vec[length(vec)+1] = rho*vec[length(vec)]*(1-vec[length(vec)])
}
vec
}
quadmap = function(start, rho) {
vec = c(start)
while(abs(vec[length(vec)]-vec[(length(vec)-1)])>=0.02) {
vec[length(vec)+1] = rho*vec[length(vec)]*(1-vec[length(vec)])
}
return(length(vec))
}
quadmap(start=0.95, rho=2.99)
quadmap = function(start, rho) {
vec = c(start)
vec[2] = rho*vec[length(vec)]*(1-vec[length(vec)])
while(abs(vec[length(vec)]-vec[(length(vec)-1)])>=0.02) {
vec[length(vec)+1] = rho*vec[length(vec)]*(1-vec[length(vec)])
}
return(length(vec))
}
quadmap(start=0.95, rho=2.99)
quadmap = function(start, rho) {
vec = c(start)
vec[2] = rho*vec[length(vec)]*(1-vec[length(vec)])
while(abs(vec[length(vec)]-vec[(length(vec)-1)])>=0.02) {
vec[length(vec)+1] = rho*vec[length(vec)]*(1-vec[length(vec)])
}
return(length(vec)-1)
}
quadmap(start=0.95, rho=2.99)
tmpFn = function(xVec) {
xAvg = mean(xVec)
n = length(xVec)
r1 = sum((xVec[2:n]-xAvg)(xVec[1:n]-xAvg))
r2 = sum((xVec[3:n]-xAvg)(xVec[1:(n-2)]-xAvg))
return(list(r1, r2))
}
tmpFn(seq(2, 56, by=3))
x = seq(2, 56, by=3)
x
tmpFn(x)
mean(x)
length(x)
r1 = sum((x[2:length(x)]-mean(x))(xVec[1:(length(x)-1)]-xAvg))
r1 = (x[2:length(x)] - mean(x))
r1 = (x[2:length(x)] - mean(x))(x[1:(length(x)-1)]-mean(x))
x[2:length(x)]
x[1:(length(x)-1)]
x[2:length(x)]*x[1:(length(x)-1)]
(x[2:length(x)]-mean(x))*x[1:(length(x)-1)]
(x[2:length(x)]-mean(x))*(x[1:(length(x)-1)]-mean(x))
r1 = (x[2:length(x)]-mean(x))*(x[1:(length(x)-1)]-mean(x))
r1 = (x[2:length(x)] - mean(x))(x[1:(length(x)-1)]-mean(x))
tmpFn = function(xVec) {
xAvg = mean(xVec)
n = length(xVec)
r1 = sum((xVec[2:n]-xAvg)*(xVec[1:n]-xAvg))
r2 = sum((xVec[3:n]-xAvg)*(xVec[1:(n-2)]-xAvg))
return(list(r1, r2))
}
tmpFn(seq(2, 56, by=3))
tmpFn = function(xVec) {
n = length(xVec)
r1 = sum((xVec[2:n]-mean(x))*(xVec[1:n]-mean(x)))
r2 = sum((xVec[3:n]-mean(x))*(xVec[1:(n-2)]-mean(x)))
return(list(r1, r2))
}
tmpFn(seq(2, 56, by=3))
xVec
xVec = seq(2, 56, by=3)
length(xVec[3:n])
n = length(xVec)
length(xVec[3:n])
length(xVec[1:(n-2)])
length(xVec[2:n])
length(xVec[1:(n-1)])
tmpFn = function(xVec) {
n = length(xVec)
r1 = sum((xVec[2:n]-mean(x))*(xVec[1:(n-1)]-mean(x)))
r2 = sum((xVec[3:n]-mean(x))*(xVec[1:(n-2)]-mean(x)))
return(list(r1, r2))
}
tmpFn(seq(2, 56, by=3))
tmpFn = function(xVec) {
n = length(xVec)
r1 = sum((xVec[2:n]-mean(x))*(xVec[1:(n-1)]-mean(x)))/sum((xVec-mean(x))^2)
r2 = sum((xVec[3:n]-mean(x))*(xVec[1:(n-2)]-mean(x)))/sum((xVec-mean(x))^2)
return(list(r1, r2))
}
tmpFn(seq(2, 56, by=3))
tmpFn = function(xVec, k) {
n = length(xVec)
r = sum((xVec[(k+1):n]-mean(x))*(xVec[1:(n-(k-1))]-mean(x)))/sum((xVec-mean(x))^2)
return(r)
}
tmpFn(seq(2, 56, by=3), 1)
tmpFn = function(xVec, k) {
n = length(xVec)
r = sum((xVec[(k+1):n]-mean(x))*(xVec[1:(n-1]-mean(x)))/sum((xVec-mean(x))^2)
return(r)
}
tmpFn = function(xVec, k) {
n = length(xVec)
r = sum((xVec[(k+1):n]-mean(x))*(xVec[1:(n-1)]-mean(x)))/sum((xVec-mean(x))^2)
return(r)
}
tmpFn(seq(2, 56, by=3), 1)
tmpFn(seq(2, 56, by=3), 2)
tmpFn = function(xVec, k) {
n = length(xVec)
r = sum((xVec[(k+1):n]-mean(x))*(xVec[1:(n-k)]-mean(x)))/sum((xVec-mean(x))^2)
return(r)
}
tmpFn(seq(2, 56, by=3), 2)
ts(3, start=c(1960,3), frequency=12)
ts(c(3:200), start=c(1960,3), frequency=12)
att = ts(c(3:200), start=c(1960,3), frequency=12)
att[1]
att[2]
tsEwma = function(tsDat, m0=0, delta=0.7) {
mCurr = m0
ewmaVec = c()
for (i in 1:length(tsEwma)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-delta)*et
mCurr=ewmaVec[i]
}
}
tsEwma = function(tsDat, m0=0, delta=0.7) {
mCurr = m0
ewmaVec = c()
for (i in 1:length(tsEwma)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-delta)*et
mCurr=ewmaVec[i]
}
return(ewmaVec)
}
tsEwma(att)
length(att)
mCurr = 0
ewmaVec = c()
for (i in 1:length(tsEwma)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-0.7)*et
mCurr = ewmaVec[i]
}
for (i in 1:length(tsEwma)) {
et = att[i] - mCurr
ewmaVec[i] = mCurr + (1-0.7)*et
mCurr = ewmaVec[i]
}
for (i in 1:length(tsEwma)) {
et = att[i] - mCurr
ewmaVec[i] = mCurr + (1-0.7)*et
mCurr = ewmaVec[i]
}
ewmaVec
ewmaVec
for (i in 1:length(tsEwma)) {
et = att[i] - mCurr
ewmaVec[i] = mCurr + (1-0.7)*et
mCurr = ewmaVec[i]
}
ewmaVec
ewmaVec = c()
mCurr = 0
for (i in 1:length(att)) {
et = att[i] - mCurr
ewmaVec[i] = mCurr + (1-0.7)*et
mCurr = ewmaVec[i]
}
mCurr
ewmaVec
tsEwma = function(tsDat, m0=0, delta=0.7) {
mCurr = m0
ewmaVec = c()
for (i in 1:length(tsDat)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-delta)*et
mCurr=ewmaVec[i]
}
return(ewmaVec)
}
tsEwma(att)
att
att.start
att$start
start(att)
frequency(att)
tsEwma = function(tsDat, m0=0, delta=0.7) {
mCurr = m0
ewmaVec = c()
for (i in 1:length(tsDat)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-delta)*et
mCurr=ewmaVec[i]
}
return(ts(ewmaVec, start(tsDat), frequency(tsDat)))
}
tsEwma(att)
start(tsDat)
start(att)
frequency(att)
tsEwma(att)
tsEwma(att)
tsEwma = function(tsDat, m0=0, delta=0.7) {
mCurr = m0
ewmaVec = c()
for (i in 1:length(tsDat)) {
et = tsDat[i] - mCurr
ewmaVec[i] = mCurr + (1-delta)*et
mCurr=ewmaVec[i]
}
return(ts(ewmaVec, start=start(tsDat), frequency=frequency(tsDat)))
}
tsEwma(att)
m = matrix(0, nrow=6, ncol=6)
row(m)
rows(m)
m = row(m)
m[[3]]
m[3,]
m[,3]
student.number = 200
V = c('a', 'e', 'i', 'o', 'u', 'au', 'in', 'an', 'on', 'ou')
C = letters[-grep('a|e|i|o|u', letters)]
I = toupper(C)
chunks = function(A, n) {
return(sample(A, n, replace=T, prob=rep(1/length(A), length(A))))
}
chunks(I, 5)
paste(chunks(I, 5), chunks(V, 5), chunks(C, 5), chunks(V, 5))
paste(chunks(I, 5), chunks(V, 5), chunks(C, 5), chunks(V, 5), sep='')
student.number = 200
V = c('a', 'e', 'i', 'o', 'u', 'au', 'in', 'an', 'on', 'ou')
C = letters[grep('a|e|i|o|u', letters)]
I = toupper(C)
paste(chunks(I, 5), chunks(V, 5), chunks(C, 5), chunks(V, 5))
student.number = 200
V = c('a', 'e', 'i', 'o', 'u', 'au', 'in', 'an', 'on', 'ou')
C = letters[-grep('a|e|i|o|u', letters)]
I = toupper(C)
paste(chunks(I, 5), chunks(V, 5), chunks(C, 5), chunks(V, 5))
paste(chunks(I, 5), chunks(V, 5), chunks(C, 5), chunks(V, 5), sep='')
grades = sapply(1:6, function(x) rnorm(200, mean=50, sd=30))
grades
typeof(grades)
as.data.frame(grades)
rbinom(3, 10, 1)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.23)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(3, 10, 0.04)
rbinom(1000, 30, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.05)
rbinom(30, 1, 0.25)
mean(rbinom(30, 1, 0.25))
library(gdata)
ls
clear
clear()
getwd()
setwd(src)
setwd("src")
getwd
getwd()
setwd("exim")
read.csv("try1.csv")
dat = read.csv("try1.csv")
dat
dat = table(dat)
dat
dat = read.csv("try1.csv")
dat
chisq.test(dat)
rand(5)
try2 = matrix(c(7, 1, 3, 87, 18, 84, 12, 3, 4, 9, 1, 7), ncol=3, byrow=TRUE)
try2
chisq.test(try2)
as.data.frame.matrix(try2)
try3 = as.data.frame.matrix(try2)
try3
try2
fit <- aov(y ~ V1, data=try3)
try3:data
data:try3
c(1,2,3):c(2,3,4)
fit <- aov(V1 ~ A, data=try3)
A
B
fit <- aov(V1 ~ V2, data=try3)
fit
Alertness
datafilename = "http://personality-project.org/R/datasets/R.appendix1.data"
data.ex1 = read.table(datafilename, header=T)
data.ex1
datafilename = "personality-project.org/R/datasets/R.appendix1.data"
data.ex1 = read.table(datafilename, header=T)
datafilename = "http://personality-project.org/r/datasets/R.appendix1.data"
data.ex1 = read.table(datafilename, header=T)
data.ex1
aov.ex1 = aov(Alertness~Dosage, data=ex1)
aov.ex1 = aov(Alertness~Dosage, data=data.ex1
)
aov.ex1
summary(aov.ex1)
datafilename = "http://personality-project.org/r/datasets/R.appendix2.data"
data.ex1 = read.table(datafilename, header=T)
aov.ex1 = aov(Alertness~Dosage, data=data.ex1)
data.ex2
data.ex2 = read.table(datafilename, header=T)
data.ex2
aov.ex2 = aov(Alertness~Gender*Dosage, data=data.ex2)
summary(aov.ex2)
datafilename = "http://personality-project.org/r/datasets/R.appendix3.data"
data.ex3 = read.table(datafilename, header=T)
data.ex3
aov.ex3 = aov(Recall~Valence+Error(Subject/Valence), data.ex3)
summary(aov.ex3)
mean(data.ex3.Recall)
mean(data.ex3[Recall])
Recall
data.ex23
data.ex3(Recall)
data.ex3
data.ex3["Recall"]
mean(data.ex3["Recall"])
avg(data.ex3["Recall"])
average(data.ex3["Recall"])
colSums(data.ex3["Recall"])
colSums(data.ex3["Recall"])/15
rowMeans(data.ex3["Recall"])/15
colMeans(data.ex3["Recall"])/15
colMeans(data.ex3["Recall"])
data.ex2
data.ex2["Toughness"] <- c(1, 3, 4, 5, 6, 1, 2, 4, 5, 7, 3, 4, 5, 8, 9, 1)
data.ex2
aov.ex2 = aov(Alertness~Gender+Toughness, data=data.ex2)
summary(aov.ex2)
results = lm(Alertness~Toughness + Dosage)
Alertness = data.ex2["Alertness"]
Dosage = data.ex2["Dosage"]
Toughness = data.ex2["Toughness"]
results = lm(Alertness~Toughness + Dosage)
Alertness = c(data.ex2["Alertness"])
Alertness
Dosage = c(data.ex2["Dosage"])
Toughness = c(Toughness)
results = lm(Alertness~Toughness + Dosage)
results = lm(data.ex2["Alertness"]~data.ex2["Toughness"]+data.ex2["Dosage"])
data.ex
data.ex2
as.table(data.ex2)
data.ex2
results = lm(Alertness ~ Toughness + Dosage, data.ex2)
anova(results)
try2 = matrix(c(7, 1, 3, 87, 18, 84, 12, 3, 4, 9, 1, 7), ncol=3, byrow=TRUE)
try2
chisq.test(try2)
save.image("~/Dropbox/try7.RData")
gecko1 = matrix(c("C", 1, "C", 0, "C", 0, "C", 0, "C", 1, "E", 1, "E", 0, "E", 0, "E", 0, "E", 0, "E", 0, "E", 1, "C", 0, "C", 1), ncol=2, byrow=TRUE)
gecko1
as.numeric(geck1[,2])
as.numeric(gecko1[,2])
gecko1[,2] = as.numeric(gecko1[,2])
gecko1
dat = read.csv("geckocsv.csv", header=T)
dat
dat = read.csv("geckocsv.csv")
dat
dat = read.csv("geckocsv.csv", header=F)
dat
myAOV = aov(V2~V1, data=dat)
summary(myAOV)
dat = read.csv("geckocsv.csv", header=F)
myAOV = aov(V2~V1, data=dat)
summary(myAOV)

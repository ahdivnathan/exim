taxrate = c(4,7.25,6.25,5.3,4.25,7)
taxrate
names(taxrate) = c('AL')
names(taxrate) = c('AL', 'CA', 'IL', 'KS', 'NY', 'TN')
taxrate
taxrate[3]
taxrate['KS']
taxrate < 6
taxrate[taxrate > 6]
sum(taxrate > 6)
sum(taxrate[taxrate > 6])
max(taxrate)
taxrate[taxrate == max(taxrate)]
which(taxrate == max(taxrate))
which.max(taxrate)
taxrate = c(1:4:1)
taxrate = 1:4
taxrate
taxrate = c(1:4,4:1)
taxrate
hello = rep(5,4)
hello
createVector2 = function(a,b,c,k,l,m){}
createVector2 = function(a,b,c,k,l,m){
return c(rep(a,k),rep(b,l),rep(c,m))
}
createVector2 = function(a,b,c,k,l,m){
return c(rep(a,k),rep(b,l),rep(c,m))
}
createVector2 = function(a,b,c,k,l,m)
return c(rep(a,k),rep(b,l),rep(c,m))
createVector2 = function(a,b,c,k,l,m){}
createVector2 = function(a,b,c,k,l,m){
return c(rep(a,k),rep(b,l),rep(c,m))}
c(rep(2,2),rep(3,3),rep(4,4))
(rep(2,2),rep(3,3),rep(4,4))
seq(from = c('label ', 1), to = c('label ', n), by = 1)
'label ' + 1
c('label ', 1)
x = 1:5
c('label',x)
paste('label', x)
createVector2 = function(a,b,c,k,l,m){
return(c(rep(a,k),rep(b,l),rep(c,m)))
}
createVector2('1','2','3','0','1','1')
ceiling(2.5)
createVector4 = function(a,b,s){
n1 = floor((b-a)/s)
}
createVector4 = function(a,b,s){
n1 = floor((b-a)/s)
n2 = ceiling(((b-a)/s)-1)
return(n1==n2)
}
createVector4(3,4,1)
createVector4 = function(a,b,s){
n1 = ceiling((b-a)/s)
n2 = floor(((b-a)/s)-1)
return(n1==n2)
}
createVector4(3,4,1)
ceiling((4-3)/1)
createVector4 = function(a,b,s){
n1 = floor((b-a)/s)
n2 = ceiling(((b-a)/s)-1)
return(n1==n2)
}
createVector4(3,4,1)
floor((4-3)/1)
seq(from = 4.5, to = 2.5, by = -0.5)
seq(from = 2.5, to = 4.5, by = -0.5)
0:9
createVector4 = function(a,b,s){
n = 0:floor((b-a)/s)
return(c(exp(a+n*s)*cos(a+n*s)))
}
createVector4(3,4,1)
c(exp(3)*cos(3),exp(4)*cos(4))
createVector1 = function(n){
return(c(1:n,n-1:1))
}
createVector1(3)
createVector1 = function(n){
return(c(1:n,n-1:0))
}
createVector1(3)
c(1:3,2:1)
clear()
clear
createVector3 = function(label, n){
x = 1:n
return(paste(label, n, sep=' '))
}
createVector3('student', 3)
createVector3 = function(label, n){
x = 1:n
return(paste(label, x, sep=' '))
}
createVector3('student', 3)
c(1)
1
c(1) == 1
x = 'One\nTwo\nThree\nFour\n'
print(x)
cat(x)
cat('I need\n', 3, 'pairs of gloves for my', 4, 'hands')
var = sprintf("%-10s", 'Name')
cat(var)
myFunction = function(var1, var2){
return(var1)
}
x = paste('a', 'b', 'c', 'd', sep=' ')
cat(x)
x = paste('a', 'b', 'c', 'd', sep='::')
cat(x)
x = "hellomynameisahdiv'"
x = "hellomynameisahdiv"
y = substr(x, 1, 7)
cat(y)
c(a = x1, b = x2, c = x3, d = x4)
paste('label', 1:30)
set.seed(50)
xVec = sample(0:999, 250, replace=T)
yVec = sample(0:999, 250, replace=T)
yVec[-1]
yVec
yVec
yVec[-3]
yVec[3]
which(yVec>600)
tmp = matrix(cat(1,1,3,5,2,6,-2,-1,-3),nr=3)
tmp = matrix(c(1,1,3,5,2,6,-2,-1,-3),nr=3)
tmp
tmp%*%tmp%*%tmp
tmp[,3] = tmp[,1]+tmp[,2]
tmp
tmp = matrix(c(1,5,-2,1,2,-1,3,6,-3),nr=3)
tmp
tmp = matrix(c(10,-10,10), b=T, nc=3, nr=15)
tmp
crossprod(tmp)
matE=matrix(c(0), b=T, nr=6, nc=6)
matE
row(matE)
col(matE)
abs(col(matE)-row(matE))
matE[abs(col(matE)-row(matE))==1] = 1
matE
outer(0:4, 0:4, '+')
outer(0:5,7:13, '*')
outer(0:8, 0:8, '-')
outer(0:8, 0:8, '-')
outer(0:8, 0:8, '+')
outer(0:8, 0:8, '-')
set.seed(75)
aMat = matrix( sample(10, size=60, replace=T), nr=6)
aMat
colSums(aMat)
aMatSums = colSums(aMat)
outer(aMatSums, aMatSums, '+')
scoreRange=c(0,100)
scoreRange[1]
scoreRange[2]
rnorm(5, mean=50, sd=50)
type(rnorm(5, mean=50, sd=10))
typeof(rnorm(5, mean=50, sd=10))
vec1 = rnorm(5*5, mean=50, sd=10)
tmp = matrix(vec1, nr=5, nc=5)
tmp
tmp = ifelse(tmp<0, 0, tmp)
tmp = ifelse(tmp>100, 100, tmp)
tmp[1,1] = 120
tmp
tmp = ifelse(tmp>100, 100, tmp)
tmp
round(tmp,2)
round(tmp,0)
nrow(tmp)
length(1:10)
c(1:10)
matrix(c(1:10))
n = 100
x = rnorm(n)
X = rnorm(n)
Z = rnorm(n)
rxy = c(-.5, 0, .5)
Y = matrix(NA, n, length(rxy))
rxy.sample = rep(NA, length(rxy))
for i in 1:length(rxy)){}
for i in 1:length(rxy)){
Y[,i] = rxy[i] * X + sqrt(1 - rxy[i]^2) * Z
for i in 1:length(rxy)){
Y[,i] = rxy[i] * X + sqrt(1 - rxy[i]^2) * Z
rxy.sample[i] = cor(Y[,i], X)
}
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
x = rnorm(n)
X = rnorm(n)
Z = rnorm(n)
plot(X, Z)
plot(X, Z, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
par(mar = rep(2, 4))
plot(X, Z, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
print plot(X, Z, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
plot(X, Z, main="Scatterplot Example", xlab="Car Weight ", ylab="Miles Per Gallon ", pch=19)
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
source.with.encoding('~/src/stat135/hwk8.R', encoding='UTF-8')
setwd("/Users/dk/src/exim")
source("./clean2.R")
gatherIndexData()
source("./clean2.R")
gatherIndexData()
print(gatherIndexData())
source("./clean2.R")
print(gatherIndexData())
setwd("/Users/dk/src/exim")
source("./clean2.R")
getTradeIndex()
